
package main

import (
    "bufio"
    "fmt"
    "io"
    "os/exec"
    "strings"
    "testing"
)

func TestConnectToRouter16(t *testing.T) {
    // Create the docker exec command
    cmd := exec.Command("docker", "exec", "-i", "clab-frrlab-router2", "/bin/bash")

    // Connect to the command's standard input, output, and error
    stdin, err := cmd.StdinPipe()
    if err != nil {
        fmt.Println("Error obtaining stdin pipe:", err)
        return
    }
    stdout, err := cmd.StdoutPipe()
    if err != nil {
        fmt.Println("Error obtaining stdout pipe:", err)
        return
    }
    stderr, err := cmd.StderrPipe()
    if err != nil {
        fmt.Println("Error obtaining stderr pipe:", err)
        return
    }

    // Start the command
    if err := cmd.Start(); err != nil {
        fmt.Println("Error starting command:", err)
        return
    }

    // Create a scanner to read from the command's output
    scanner := bufio.NewScanner(stdout)

    // Send commands and read output sequentially
    go func() {
        // Send commands
        commands := []string{
            "vtysh\n",
            "configure terminal\n",
            "exit\n",
            "exit\n",
        }
        for _, cmd := range commands {
            if _, err := io.WriteString(stdin, cmd); err != nil {
                fmt.Println("Error writing command:", err)
                return
            }
            // Wait for the prompt
            waitForPrompt(scanner)
        }
    }()

    // Read error in main goroutine
    go func() {
        scanner := bufio.NewScanner(stderr)
        for scanner.Scan() {
            fmt.Println("Error:", scanner.Text())
        }
        if err := scanner.Err(); err != nil {
            fmt.Println("Error reading stderr:", err)
        }
    }()

    // Wait for the command to finish
    if err := cmd.Wait(); err != nil {
        fmt.Println("Error waiting for command to exit:", err)
        return
    }
}

func waitForPrompt(scanner *bufio.Scanner) {
    for scanner.Scan() {
        line := scanner.Text()
        fmt.Println("Output:", line)
        if strings.HasSuffix(line, "#") {
            fmt.Println("Prompt detected.")
            break
        }
    }
}
