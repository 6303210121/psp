
package main

import (
	"fmt"
	"strings"
)

// SSHHandler simulates an SSH connection handler
type SSHHandler struct {
	Prompt string
}

// SendCommand sends a command over SSH
func (ssh *SSHHandler) SendCommand(command string) string {
	// Simulating command execution and getting the output
	output := "Command output for: " + command

	// Update prompt if command changes the mode
	if command == "exit" {
		ssh.Prompt = "New Prompt"
	} else if command == "vtysh" {
		ssh.Prompt = "vtysh Prompt"
		// Print the command output
		fmt.Println("Output after entering vtysh:", output)
	} else if command == "configure terminal" {
		ssh.Prompt = "Config Prompt"
		// Print the command output
		fmt.Println("Output after entering config:", output)
	}

	return output
}

// FindPrompt returns the current prompt
func (ssh *SSHHandler) FindPrompt() string {
	return ssh.Prompt
}

// EnterVTYSHRoot enters the vtysh root mode
func EnterVTYSHRoot(ssh *SSHHandler) {
	for strings.Contains(ssh.Prompt, "(config") {
		ssh.SendCommand("exit")
	}
	if !strings.Contains(ssh.Prompt, "vtysh") {
		ssh.SendCommand("vtysh")
	}
}

// EnterConfigRoot enters the configuration mode
func EnterConfigRoot(ssh *SSHHandler) {
	for strings.Contains(ssh.Prompt, "(config") && !strings.Contains(ssh.Prompt, "(config)") {
		ssh.SendCommand("exit")
	}
	if !strings.Contains(ssh.Prompt, "(config") {
		ssh.SendCommand("configure terminal")
	}
}

func main() {
	// Create an instance of SSHHandler
	ssh := &SSHHandler{
		Prompt: "Initial Prompt",
	}

	// Example usage:
	EnterVTYSHRoot(ssh)
	fmt.Println("Prompt after entering vtysh root:", ssh.FindPrompt())

	EnterConfigRoot(ssh)
	fmt.Println("Prompt after entering config mode:", ssh.FindPrompt())
}
