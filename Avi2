
package main

import (
    "bufio"
    "fmt"
    "io"
    "os/exec"
    "strings"
    "testing"
)

func TestConnectToRouter16(t *testing.T) {
    // Create the docker exec command
    cmd := exec.Command("docker", "exec", "-i", "clab-frrlab-router2", "/bin/bash")

    // Connect to the command's standard input, output, and error
    stdin, err := cmd.StdinPipe()
    if err != nil {
        fmt.Println("Error obtaining stdin pipe:", err)
        return
    }
    stdout, err := cmd.StdoutPipe()
    if err != nil {
        fmt.Println("Error obtaining stdout pipe:", err)
        return
    }
    stderr, err := cmd.StderrPipe()
    if err != nil {
        fmt.Println("Error obtaining stderr pipe:", err)
        return
    }

    // Start the command
    if err := cmd.Start(); err != nil {
        fmt.Println("Error starting command:", err)
        return
    }

    // Send commands in a separate goroutine
    go func() {
        commands := []string{
            "vtysh\n",
            "configure terminal\n",
            "exit\n",
            "exit\n",
        }
        for _, cmd := range commands {
            if _, err := io.WriteString(stdin, cmd); err != nil {
                fmt.Println("Error writing command:", err)
                return
            }
        }
    }()

    // Read output in main goroutine
    go func() {
        scanner := bufio.NewScanner(stdout)
        for scanner.Scan() {
            fmt.Println(scanner.Text())
            if strings.Contains(scanner.Text(), "#") {
                break
            }
        }
        if err := scanner.Err(); err != nil {
            fmt.Println("Error reading output:", err)
        }
    }()

    // Read error in main goroutine
    go func() {
        scanner := bufio.NewScanner(stderr)
        for scanner.Scan() {
            fmt.Println(scanner.Text())
        }
        if err := scanner.Err(); err != nil {
            fmt.Println("Error reading stderr:", err)
        }
    }()

    // Wait for the command to finish
    if err := cmd.Wait(); err != nil {
        fmt.Println("Error waiting for command to exit:", err)
        return
    }
}
