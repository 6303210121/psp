
package main

import (
	"fmt"
	"os/exec"
	"strings"
	"testing"
)

func runCommand(command string) (string, error) {
	output, err := exec.Command("sh", "-c", command).CombinedOutput()
	if err != nil {
		return "", fmt.Errorf("error executing command '%s': %v\nOutput: %s", command, err, string(output))
	}
	return string(output), nil
}

func TestConnectToRouter(t *testing.T) {
	// Command to list available containers
	psCommand := "docker ps"

	// Execute the command to list available containers
	psOutput, err := runCommand(psCommand)
	if err != nil {
		t.Fatalf("Failed to list Docker containers: %v", err)
	}

	// Print the output of the docker ps command
	fmt.Println("Available containers:")
	fmt.Println(psOutput)

	// Command to log in to bash shell of the container
	loginCommand := "docker exec clab-frrlab-router2 /bin/bash"

	// Execute the command to log in to the bash shell of the container
	loginOutput, err := runCommand(loginCommand)
	if err != nil {
		t.Fatalf("Failed to log in to the container: %v", err)
	}

	// Print the output of the login command
	fmt.Println("Login output:")
	fmt.Println(loginOutput)

	// Command to log in to vtysh and execute commands
	vtyshCommands := `
		vtysh
		configure terminal
		interface eth1
		no IP address 192.168.2.2
		end
		show interface brief
		exit
	`

	// Execute the commands within the container's environment
	vtyshOutput, err := runCommand(fmt.Sprintf("%s -c '%s'", loginCommand, strings.ReplaceAll(vtyshCommands, "\n", ";")))
	if err != nil {
		t.Fatalf("Failed to execute vtysh commands: %v", err)
	}

	// Print the output of the vtysh commands
	fmt.Println("vtysh output:")
	fmt.Println(vtyshOutput)
}
