
package main

import (
	"fmt"
	"os/exec"
	"strings"
	"testing"
	"time"
)

func TestConnectToRouter16(t *testing.T) {
	// Command to log in to bash shell of the container
	loginCommand := "docker exec clab-frrlab-router2 /bin/bash"

	// Execute the command to log in to the bash shell of the container
	loginOutput, err := exec.Command("sh", "-c", loginCommand).CombinedOutput()
	if err != nil {
		t.Errorf("Error logging in to the container: %v", err)
		return
	}

	// Print the output of the login command
	fmt.Println("Login output:")
	fmt.Println(string(loginOutput))

	// Command to log in to vtysh
	vtyshCommand := "vtysh"

	// Execute the command to log in to vtysh within the container's environment
	vtyshOutput, err := exec.Command("sh", "-c", loginCommand+" -c '"+vtyshCommand+"'").CombinedOutput()
	if err != nil {
		t.Errorf("Error logging in to vtysh: %v", err)
		return
	}

	// Print the output of the vtysh command
	fmt.Println("vtysh output:")
	fmt.Println(string(vtyshOutput))

	// Wait for the configuration prompt "router(config)#"
	if !waitForConfigPrompt(vtyshOutput, 10*time.Second) {
		t.Error("Configuration prompt not found")
		return
	}

	// Command to show running configuration
	showConfigCommand := "show running-config"

	// Execute the command to show running configuration within the container's environment
	showConfigOutput, err := exec.Command("sh", "-c", loginCommand+" -c '"+vtyshCommand+" -c \""+showConfigCommand+"\"'").CombinedOutput()
	if err != nil {
		t.Errorf("Error showing running configuration: %v", err)
		return
	}

	// Print the output of the show running-config command
	fmt.Println("Running configuration:")
	fmt.Println(string(showConfigOutput))
}

func waitForConfigPrompt(output []byte, timeout time.Duration) bool {
	configPrompt := "router(config)#"
	start := time.Now()

	for {
		if strings.Contains(string(output), configPrompt) {
			fmt.Println("Configuration prompt found:", configPrompt)
			return true
		}

		if time.Since(start) > timeout {
			fmt.Println("Timeout waiting for configuration prompt:", configPrompt)
			return false
		}

		time.Sleep(100 * time.Millisecond)
	}
}
